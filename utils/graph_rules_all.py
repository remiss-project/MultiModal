#!/usr/bin/env python
# coding: utf-8
import ast
import numpy as np
import json
import pdb
import networkx as nx
import random


def er_to_graph_code(er_graph):
    try:
       code=er_to_graph_code_core(er_graph)
       return code
    except:
       print('bad er graph >>')
       code="DG.add_node('noer', ent_type='xx', data='xx')"
       return code

def er_to_graph_code_core(er_graph):
    """
    Convert entity relation representation to dx.add_node and dx.add_edge format.
    
    Args:
    - er_graph (dict): Entity relation graph representation containing nodes and edges.
    
    Returns:
    - str: Single string containing dx.add_node and dx.add_edge statements.
    """
    dx_statements = []

    for node_set in er_graph['nodes']:
        node_name, node_data = node_set
        dx_statements.append(f"DG.add_node('{node_name}', ent_type='{node_data['ent_type']}', data='{node_data['data']}')")

    for edge_tuple in er_graph['edges']:
        start_node, end_node, edge_data = edge_tuple
        dx_statements.append(f"DG.add_edge('{start_node}', '{end_node}', action='{edge_data['action']}')")

    return '\n'.join(dx_statements)

def create_graph_from_output(output):
    DG = nx.DiGraph()
    flag=0
    try:
      for node, attrs in output['nodes']:
        DG.add_node(node, **attrs)
        
      for edge in output['edges']:
        source, target, attrs = edge
        DG.add_edge(source, target, **attrs)

    except:
        flag=1
        print('bad er graph')
    return flag,DG
    
                     

graph_format_ex = """
{
    'nodes': [('Protester',     {'ent_type': 'PERSON',   'data': 'Individual'}), 
              ('Protest',       {'ent_type': 'EVENT',    'data': 'Protest against Government'})
              ('Antigovernment',{'ent_type': 'CONCEPT',  'data': 'Against the Government'}),
              ('Thailand',      {'ent_type': 'LOCATION', 'data': 'Country in Asia'}), 
              ('National Flag', {'ent_type': 'THING',    'data': 'National Symbol'}), 
              ('Parliament',    {'ent_type': 'BUILDING', 'data': 'Government Building'}), 
              ('Bangkok',       {'ent_type': 'LOCATION', 'data': 'City in Thailand, Thailand is Country in Asia'})], 
    'edges': [('Protester'    , 'Protest'   ,    {'action': 'organize'}),
              ('Protester'    , 'Parliament'   , {'action': 'outside'}) 
              ('Parliament'   , 'Bangkok'      , {'action': 'located in'})
              ('Protester'    , 'National Flag', {'action': 'waves'})
              ('National Flag', 'Thailand'     , {'action': 'of'})
              ]
}

"""

graph_format_template = """
{
    'nodes': [('Node_1', {'attribute_1': 'value_1', 'attribute_2': 'value_2'}),
              ('Node_2', {'attribute_1': 'value_1', 'attribute_2': 'value_2'})],
    'edges': [('Node_1', 'Node_2', {'attribute_1': 'value_1'})]
}
"""

graph_rules_combined = { 
     "Text Preprocessing Rule": "Break up complex or long sentences into smaller coherent sentences. Restructure the text to explicitly state possession or agency, ensuring that all implied words, particularly those related to ownership or action, are explicitly stated. Use possessive pronouns or nouns, active voice constructions, clarifying phrases or clauses, and rearrange sentences or clauses as necessary to achieve clarity and explicitness. Resolve pronouns to full names for clear understanding. Converts all spelled-out numbers such as 'two' or 'three hundred', that indicate quantity or rank, into their numerical equivalents, such as '2' or '300, respectively. Dont convert when they are part of a named entity like 'Air Force one','Formula One','7-Eleven' etc. ",
     "Entity Detection and Node Creation Rule ":  "Utilize Named Entity Recognition (NER) techniques to identify All named entities in the text. Named entities encompass specific entities that have names, including persons, locations, organizations, dates, etc. Ensure each entity is distinct and unambiguous by resolving entities to their official or most commonly recognized names. Perform entity normalization, splitting composite entities when necessary. Follow the categorization in <<< {'LOCATION': 'Entities representing specific places or geographic locations.', 'PERSON': 'Entities representing individuals, including names of people, titles, positions, etc.', 'ORGANIZATION': 'Entities representing companies, institutions, groups, or any organized entity.', 'DATE': 'Entities representing specific dates, including days of the week, months, years, holidays, etc.', 'TIME': 'Entities representing specific times or time intervals.', 'CARDINAL': 'Entities representing numerical quantities or counts.', 'ORDINAL': 'Entities representing positions in a sequence or ranking.', 'EVENT': 'Entities representing specific events or occurrences like protests, attacks, demonstrations, conflicts, marches, and things like these.  It is of utmost importance that you detect words related to violence, conflict, disruption, protest, damage or propaganda in the text. You must find such keywords or related keywords if they exist in the text no matter how they are present. If such words keywords or related keywords are in the text , you must ensure that they are also present in the entity relationship graph you output, as entity type event, and relate them to other detected entities following causal reasoning, like who did what to whom.', 'PRODUCT': 'Entities representing specific products or items.'} >>> . I Emphasize that entities names are simplified for better representation. For instance, represent 'President of the USA' as two distinct entities, ('President', {'ent_type': 'Person', 'data': 'President of the USA'}) and ('USA', {'ent_type': 'LOCATION', 'data': 'unk,unk,USA'}). For instance, even when the 'of' is implied, as in 'Thai National Flag', represent it as 'National Flag of Thailand' and then break it down into separate entities: 'National Flag' as {'ent_type': 'ENTITY', 'data': 'National Flag'}, and 'Thailand' as {'ent_type': 'LOCATION', 'data': 'unk,unk,Thailand'}. Similarly, for composite entities like 'New York City Police Department', break them down into 'New York City' as {'ent_type': 'LOCATION', 'data': 'New York City, USA'}, and 'Police Department' as {'ent_type': 'ORGANIZATION', 'data': 'Police Department'}. Resolve acronyms to their full forms for clarity. For example, expand 'NASA' to 'National Aeronautics and Space Administration' as {'ent_type': 'ORGANIZATION', 'data': 'National Aeronautics and Space Administration, USA'}.  Encode the entity type as 'ent_type' and provide detailed information within the 'data' field including always the full name, type of thing, brand or manufacturer, relevant details about the entity, and geographic location if applicable. For example, 'Dreamliner' should be {'ent_type': 'THING', 'data': 'Dreamliner is a long-haul airliner from Boeing'}.  To fill the data field, you must follow these entity type specfic guidelines <<< { for type 'LOCATION': always ONLY Add Geographic location details in terms of 3 things namely city, state, country and nothing else, if it is unknown say 'unk' but remember to always have 3 fields. Examples: ('Empire State Building', {'ent_type': 'LOCATION', 'data': 'New York City, New York, USA'}),('US', {'ent_type': 'LOCATION', 'data': 'unk, unk, USA'}), ('Neighborhood', {'ent_type': 'LOCATION', 'data': 'unk, unk, unk'}) . For type 'PERSON': Add Full name, if full name is not present, try to guess from context, and official designation. Example: ('Barack Obama', {'ent_type': 'PERSON', 'data': 'Barack Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party'}),  'ORGANIZATION': Add Full Name of Organization and brief description of what it involved in. Example: ('United Nations', {'ent_type': 'ORGANIZATION', 'data': 'United Nations is an international organization working for peace and security'}),  'DATE': Add Details about date in terms of  which day of the week, months, year using the input text. You can use your internal calender to guess missing values if you are sure, otherwise leave it as 'unk' but remember to always have 4 fields. Examples: ('Sept 18 2012', {'ent_type': 'DATE', 'data': 'Tuesday, 18, September, 2012'}), ('Jan 2012', {'ent_type': 'DATE', 'data': 'unk, unk, January, 2012'}),('18 07 2012', {'ent_type': 'DATE', 'data': 'unk, 18, July, 2012'}) . 	For 'TIME': Add details about the time is measuring. Example: ('3:30 PM', {'ent_type': 'TIME', 'data': '3:30 PM'}),  'CARDINAL': Add details, using context, to describe what the number counts. Example: ('Three', {'ent_type': 'CARDINAL', 'data': 'Three apples'}),  'ORDINAL': Describe the ranking from context. Example: ('First', {'ent_type': 'ORDINAL', 'data': 'First place'}),  'EVENT': Add details about the specific kind of event in terms of protest, attack, demonstration, conflict, march, and things like these from the text context. Example: ('Protest', {'ent_type': 'EVENT', 'data': 'Protest against climate change'}),  'PRODUCT': Add details about what the product does, and who makes it. Example: ('iPhone', {'ent_type': 'PRODUCT', 'data': 'iPhone is a smartphone made by Apple Inc.'})}  >>> . YOU MUST FOLLOW THESE FORMAT FOR SPECIFYING DETAILS ABOUT THE DETECTED ENTITIES. This approach ensures consistent and clear representation of nodes throughout the graph. You must Ensure all entities are unique and there are no duplicates",

    "Relationship Detection and Edge Creation Rule  ":" Analyze the contextual significance of entities to accurately represent their roles and relationships within the text. Use the nodes detected before and identify the relationships connecting them. Create edges between two distinct nodes based on the relationships identified. When constructing edges between distinct nodes, carefully analyze the relationships depicted in the text. Identify the actions or connections described in the text involving the identified nodes. Each edge should delineate a link between two different node, following the format of (<node1>, <node2>, {'action': <action>}). The relationships depicted in such an edge  should faithfully represent the interactions between the corresponding nodes or entities in the text. Avoid creating relationships that deviate from the semantic context of the text.  Ensure that the resulting sentences formed by reading the edges always correspond to valid English expression. For instance, if the narrative states 'a person waves a flag', the corresponding edge should be ('Person', 'Flag', {'action': 'waves'}). It's crucial to maintain this consistency with the semantics of the text.  Actions or relationships must always be only 1 or 2 words, you are allowed to be abstractive if necessary. ",
    "Overall guideline" : " You must represent the text in terms of an entity relattionship graph highlighting peoples places actions and dates in the the text",
    "Verfication  Rule" : " Once you are done with the graph, apply the rules again to check if your graph is consistent. In particular check if the edges are consistent with the semantics of the text, if not retry from start. All actions described in edges must align with the actions attributed to entities in the text. Ensure that the graph is connected. Finally check all the entites of type 'LOCATION' have have 3 elements in the data field  in the format of city, state, country and  all entities of type 'DATE' has 4 elemments in the format of day, date, month, year"

}


graph_examples = [
    "Example 1 INPUT: 'A devastating earthquake struck the coastal town of Miami Beach on April 22nd, 2024, causing widespread destruction and loss of life.' OUTPUT: {'nodes': [('April 22nd, 2024', {'ent_type': 'DATE', 'data': 'unk,22,April,2024'}), ('Earthquake', {'ent_type': 'EVENT', 'data': 'Seismic event'}), ('Coastal Town of Miami Beach', {'ent_type': 'LOCATION', 'data': 'Miami, Florida, USA'}), ('Widespread Destruction', {'ent_type': 'EVENT', 'data': 'Extensive damage caused by the earthquake'}), ('Loss of Life', {'ent_type': 'EVENT', 'data': 'Fatalities resulting from the earthquake'})], 'edges': [('April 22nd, 2024', 'Earthquake', {'action': 'occurred'}), ('Earthquake', 'Coastal Town of Miami Beach', {'action': 'affected'}), ('Earthquake', 'Widespread Destruction', {'action': 'caused'}), ('Earthquake', 'Loss of Life', {'action': 'caused'})]}",
    "Example 2 INPUT: 'Renowned chef Julia Smith unveiled her latest culinary masterpiece, a fusion of French and Japanese cuisine, at her restaurant in downtown Manhattan on June 5th, 2024.' OUTPUT: {'nodes': [('June 5th, 2024', {'ent_type': 'DATE', 'data': 'unk,5,June,2024'}), ('Julia Smith', {'ent_type': 'PERSON', 'data': 'Celebrated chef'}), ('Culinary Masterpiece', {'ent_type': 'THING', 'data': 'Exceptional dish created by Julia Smith'}), ('French and Japanese Cuisine', {'ent_type': 'CONCEPT', 'data': 'Blending of culinary traditions'}), ('Restaurant in downtown Manhattan', {'ent_type': 'LOCATION', 'data': 'Manhattan, New York, USA'})], 'edges': [('June 5th, 2024', 'Julia Smith', {'action': 'unveiled'}), ('Julia Smith', 'Culinary Masterpiece', {'action': 'created'}), ('Culinary Masterpiece', 'French and Japanese Cuisine', {'action': 'incorporated'}), ('Julia Smith', 'Restaurant in downtown Manhattan', {'action': 'showcased at'})]}",
    "Example 3 INPUT: 'A historic peace agreement was signed between neighboring countries on July 4th, 2023, ending decades of conflict and paving the way for diplomatic relations.' OUTPUT: {'nodes': [('July 4th, 2023', {'ent_type': 'DATE', 'data': 'unk,4,July,2023'}), ('Historic Peace Agreement', {'ent_type': 'EVENT', 'data': 'Significant treaty signed between countries'}), ('Neighboring Countries', {'ent_type': 'GROUP', 'data': 'Nations sharing a common border'}), ('Decades of Conflict', {'ent_type': 'EVENT', 'data': 'Prolonged periods of hostility'}), ('Diplomatic Relations', {'ent_type': 'CONCEPT', 'data': 'Official interactions between countries'})], 'edges': [('July 4th, 2023', 'Historic Peace Agreement', {'action': 'was established'}), ('Historic Peace Agreement', 'Neighboring Countries', {'action': 'involves'}), ('Neighboring Countries', 'Decades of Conflict', {'action': 'resolved'}), ('Historic Peace Agreement', 'Diplomatic Relations', {'action': 'facilitated'})]}",
    "Example 4 INPUT: 'An international conference on climate change is scheduled to begin in Paris Friday, tomorrow.' OUTPUT: {'nodes': [('Tomorrow', {'ent_type': 'DATE', 'data': 'Friday,unk,unk,unk'}), ('International Conference on Climate Change', {'ent_type': 'EVENT', 'data': 'Global gathering to address environmental issues'}), ('Paris', {'ent_type': 'LOCATION', 'data': 'Paris,unk,France'})], 'edges': [('Tomorrow', 'International Conference on Climate Change', {'action': 'will commence'}), ('International Conference on Climate Change', 'Paris', {'action': 'is held in'})]}",
    "Example 5 INPUT: 'Join us for a special celebration at the community center next Sunday.' OUTPUT: {'nodes': [('Next Sunday', {'ent_type': 'DATE', 'data': 'Sunday,unk,unk,unk'}), ('Special Celebration', {'ent_type': 'EVENT', 'data': 'Communal event to mark an occasion'}), ('Community Center', {'ent_type': 'LOCATION', 'data': 'unk, unk, unk'})], 'edges': [('Next Sunday', 'Special Celebration', {'action': 'is planned for'}), ('Special Celebration', 'Community Center', {'action': 'will take place at'})]}",
    "Example 6 INPUT: 'The company's annual shareholders meeting will be held in London Headquarters in May.' OUTPUT: {'nodes': [('May', {'ent_type': 'DATE', 'data': 'unk,unk,May,unk'}), ('Company's Annual Shareholders Meeting', {'ent_type': 'EVENT', 'data': 'Annual gathering of company investors'}), ('Headquarters', {'ent_type': 'LOCATION', 'data': 'London,unk,UK'})], 'edges': [('May', 'Company's Annual Shareholders Meeting', {'action': 'will take place during'}), ('Company's Annual Shareholders Meeting', 'Headquarters', {'action': 'will be held in'})]}",
    "Example 7 INPUT: 'Climate activists staged a massive rally outside the United Nations headquarters in New York City on Earth Day, demanding urgent action on climate change.' OUTPUT: {'nodes': [('Earth Day', {'ent_type': 'DATE', 'data': 'unk,22,April,unk'}), ('Climate Activists', {'ent_type': 'GROUP', 'data': 'Advocates for environmental protection'}), ('Rally', {'ent_type': 'EVENT', 'data': 'Large public demonstration'}), ('United Nations Headquarters', {'ent_type': 'LOCATION', 'data': 'New York City, New York, USA'}), ('Urgent Action on Climate Change', {'ent_type': 'CONCEPT', 'data': 'Immediate measures to address environmental crisis'})], 'edges': [('Earth Day', 'Climate Activists', {'action': 'organized'}), ('Climate Activists', 'Rally', {'action': 'staged'}), ('Rally', 'United Nations Headquarters', {'action': 'took place outside'}), ('Climate Activists', 'Urgent Action on Climate Change', {'action': 'demanded'})]}",
    "Example 8 INPUT: 'Senator John Smith visited a local school in Himalayas on Education Day to discuss education reform with students and teachers.' OUTPUT: {'nodes': [('Education Day', {'ent_type': 'DATE', 'data': 'unk,unk,unk,unk'}), ('Senator John Smith', {'ent_type': 'PERSON', 'data': 'Elected representative'}), ('Local School', {'ent_type': 'LOCATION', 'data': 'Himalayas, unk, unk'}), ('Education Reform', {'ent_type': 'CONCEPT', 'data': 'Improvements in the education system'}), ('Students and Teachers', {'ent_type': 'GROUP', 'data': 'Educators and learners'})], 'edges': [('Education Day', 'Senator John Smith', {'action': 'visited'}), ('Senator John Smith', 'Local School', {'action': 'visited'}), ('Senator John Smith', 'Education Reform', {'action': 'discussed'}), ('Students and Teachers', 'Education Reform', {'action': 'discussed'})]}"
]




oggraph_rules_combined = { 
     "Text Preprocessing Rule": "Break up complex or long sentences into smaller coherent sentences. Restructure the text to explicitly state possession or agency, ensuring that all implied words, particularly those related to ownership or action, are explicitly stated. Use possessive pronouns or nouns, active voice constructions, clarifying phrases or clauses, and rearrange sentences or clauses as necessary to achieve clarity and explicitness. Resolve pronouns to full names for clear understanding. Converts all spelled-out numbers such as 'two' or 'three hundred', that indicate quantity or rank, into their numerical equivalents, such as '2' or '300, respectively. Dont convert when they are part of a named entity like 'Air Force one','Formula One','7-Eleven' etc. ",
     "Entity Detection and Node Creation Rule ":  "Utilize Named Entity Recognition (NER) techniques to identify All named entities in the text. Named entities encompass specific entities that have names, including persons, locations, organizations, dates, etc. Ensure each entity is distinct and unambiguous by resolving entities to their official or most commonly recognized names. Perform entity normalization, splitting composite entities when necessary. Follow the categorization in <<< {'LOCATION': 'Entities representing specific places or geographic locations.', 'PERSON': 'Entities representing individuals, including names of people, titles, positions, etc.', 'ORGANIZATION': 'Entities representing companies, institutions, groups, or any organized entity.', 'DATE': 'Entities representing specific dates, including days of the week, months, years, holidays, etc.', 'TIME': 'Entities representing specific times or time intervals.', 'CARDINAL': 'Entities representing numerical quantities or counts.', 'ORDINAL': 'Entities representing positions in a sequence or ranking.', 'EVENT': 'Entities representing specific events or occurrences like protests, attacks, demonstrations, conflicts, marches, and things like these.  It is of utmost importance that you detect words related to violence, conflict, disruption, protest, damage or propaganda in the text. You must find such keywords or related keywords if they exist in the text no matter how they are present. If such words keywords or related keywords are in the text , you must ensure that they are also present in the entity relationship graph you output, as entity type event, and relate them to other detected entities following causal reasoning, like who did what to whom.', 'PRODUCT': 'Entities representing specific products or items.'} >>> . I Emphasize that entities names are simplified for better representation. For instance, represent 'President of the USA' as two distinct entities, ('President', {'ent_type': 'Person', 'data': 'President of the USA'}) and ('USA', {'ent_type': 'LOCATION', 'data': 'United States of America'}). For instance, even when the 'of' is implied, as in 'Thai National Flag', represent it as 'National Flag of Thailand' and then break it down into separate entities: 'National Flag' as {'ent_type': 'ENTITY', 'data': 'National Flag'}, and 'Thailand' as {'ent_type': 'LOCATION', 'data': 'Thailand, Asia'}. Similarly, for composite entities like 'New York City Police Department', break them down into 'New York City' as {'ent_type': 'LOCATION', 'data': 'New York City, USA'}, and 'Police Department' as {'ent_type': 'ORGANIZATION', 'data': 'Police Department'}. Resolve acronyms to their full forms for clarity. For example, expand 'NASA' to 'National Aeronautics and Space Administration' as {'ent_type': 'ORGANIZATION', 'data': 'National Aeronautics and Space Administration, USA'}.  Encode the entity type as 'ent_type' and provide detailed information within the 'data' field including always the full name, type of thing, brand or manufacturer, relevant details about the entity, and geographic location if applicable. For example, 'Dreamliner' should be {'ent_type': 'THING', 'data': 'Dreamliner is a long-haul airliner from Boeing'}.  To fill the data field, you must follow these entity type specfic guidelines <<< { 'LOCATION': Add Details about location in terms of city, state, country. Example: ('New York City', {'ent_type': 'LOCATION', 'data': 'New York City, New York, USA'}),  'PERSON': Add Full name, if full name is not present, try to guess from context, and official designation. Example: ('Barack Obama', {'ent_type': 'PERSON', 'data': 'Barack Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party'}),  'ORGANIZATION': Add Full Name of Organization and brief description of what it involved in. Example: ('United Nations', {'ent_type': 'ORGANIZATION', 'data': 'United Nations is an international organization working for peace and security'}),  'DATE': Add Details about which day of the week, months, years, holidays. Example: ('Sept 18 2012', {'ent_type': 'DATE', 'data': 'Tuesday, September 18, 2012'}),  'TIME': Add details about the time is measuring. Example: ('3:30 PM', {'ent_type': 'TIME', 'data': '3:30 PM'}),  'CARDINAL': Add details, using context, to describe what the number counts. Example: ('Three', {'ent_type': 'CARDINAL', 'data': 'Three apples'}),  'ORDINAL': Describe the ranking from context. Example: ('First', {'ent_type': 'ORDINAL', 'data': 'First place'}),  'EVENT': Add details about the specific kind of event in terms of protest, attack, demonstration, conflict, march, and things like these from the text context. Example: ('Protest', {'ent_type': 'EVENT', 'data': 'Protest against climate change'}),  'PRODUCT': Add details about what the product does, and who makes it. Example: ('iPhone', {'ent_type': 'PRODUCT', 'data': 'iPhone is a smartphone made by Apple Inc.'})}  >>> . YOU MUST FOLLOW THESE FORMAT FOR SPECIFYING DETAILS ABOUT THE DETECTED ENTITIES. This approach ensures consistent and clear representation of nodes throughout the graph. You must Ensure all entities are unique and there are no duplicates",

    "Relationship Detection and Edge Creation Rule  ":" Analyze the contextual significance of entities to accurately represent their roles and relationships within the text. Use the nodes detected before and identify the relationships connecting them. Create edges between two distinct nodes based on the relationships identified. When constructing edges between distinct nodes, carefully analyze the relationships depicted in the text. Identify the actions or connections described in the text involving the identified nodes. Each edge should delineate a link between two different node, following the format of (<node1>, <node2>, {'action': <action>}). The relationships depicted in such an edge  should faithfully represent the interactions between the corresponding nodes or entities in the text. Avoid creating relationships that deviate from the semantic context of the text.  Ensure that the resulting sentences formed by reading the edges always correspond to valid English expression. For instance, if the narrative states 'a person waves a flag', the corresponding edge should be ('Person', 'Flag', {'action': 'waves'}). It's crucial to maintain this consistency with the semantics of the text.  Actions or relationships must always be only 1 or 2 words, you are allowed to be abstractive if necessary. ",
    "Overall guideline" : " You must represent the text in terms of an entity relattionship graph highlighting peoples places actions and dates in the the text.  Each node should represent a single entity. ",
    "Verfication  Rule" : " Once you are done with the graph, apply the rules again to check if your graph is consistent. In particular check if the edges are consistent with the semantics of the text, if not retry from start. All actions described in edges must align with the actions attributed to entities in the text. Ensure that the graph is connected"

}



oggraph_examples = [
    "Example 1 INPUT: 'After 15 minutes England were two up as Darren Bent netted from Youngs pass The Welsh could not muster a riposte.' OUTPUT: {'nodes': [('England', {'ent_type': 'LOCATION', 'data': 'England is a country'}), ('Darren Bent', {'ent_type': 'PERSON', 'data': 'Darren Bent is a professional football player, plays for England national team'}), ('Young', {'ent_type': 'PERSON', 'data': 'Young is a professional football player, plays for England national team'}), ('Wales', {'ent_type': 'LOCATION', 'data': 'Wales is a country'})], 'edges': [('Darren Bent', 'England', {'action': 'scored a goal for'}), ('Young', 'Darren Bent', {'action': 'assisted'}), ('Wales', 'England', {'action': 'could not muster a riposte'})]}",
    "Example 2 INPUT: 'Flashmob protest at Crossrail site in Central London by Unite union members in protest against blacklisting and sackings of union officials and members.' , OUTPUT: {'nodes': [('Flashmob protest', {'ent_type': 'EVENT', 'data': 'Flashmob protest is a public demonstration'}), ('Crossrail site', {'ent_type': 'LOCATION', 'data': 'Crossrail site is a construction site'}), ('Central London', {'ent_type': 'LOCATION', 'data': 'Central London is a city area in London, UK'}), ('Unite union members', {'ent_type': 'ORGANIZATION', 'data': 'Unite union members is a labor union'}), ('Blacklisting', {'ent_type': 'ACTION', 'data': 'Blacklisting is a discriminatory practice'}), ('Sackings', {'ent_type': 'ACTION', 'data': 'Sackings is a termination of employment'}), ('Union officials', {'ent_type': 'PERSON', 'data': 'Union officials is union representatives'})], 'edges': [('Unite union members', 'Flashmob protest', {'action': 'organized'}), ('Flashmob protest', 'Crossrail site', {'action': 'took place at'}), ('Crossrail site', 'Central London', {'action': 'located in'}), ('Flashmob protest', 'Blacklisting', {'action': 'protested against'}), ('Flashmob protest', 'Sackings', {'action': 'protested against'}), ('Blacklisting', 'Union officials', {'action': 'negatively affected'}), ('Sackings', 'Union officials', {'action': 'negatively affected'}), ('Blacklisting', 'Unite union members', {'action': 'negatively affected'}), ('Sackings', 'Unite union members', {'action': 'negatively affected'})]}",
    "Example 3 INPUT: 'British Muslims campaign outside the BBC headquarters in London against negative media portrayals of Muslims' , OUTPUT: {'nodes': [('British Muslims', {'ent_type': 'GROUP', 'data': 'British Muslims is the Muslim community in Britain'}), ('Campaign', {'ent_type': 'EVENT', 'data': 'Campaign is a protest activity'}), ('BBC headquarters', {'ent_type': 'LOCATION', 'data': 'BBC headquarters is a media building for British Broadcasting Corporation'}), ('London', {'ent_type': 'LOCATION', 'data': 'London is a city in UK'}), ('Negative media portrayals of Muslims', {'ent_type': 'CONCEPT', 'data': 'Negative media portrayals of Muslims refers to the poor light in which Muslims are shown in the media'})], 'edges': [('British Muslims', 'Campaign', {'action': 'organized'}), ('Campaign', 'BBC headquarters', {'action': 'took place at'}), ('BBC headquarters', 'London', {'action': 'located in'}), ('Campaign', 'Negative media portrayals of Muslims', {'action': 'protested against'})]}",
    "Example 4 INPUT: 'An antigovernment protester waves a Thai national flag outside Parliament in Bangkok ' , OUTPUT: {'nodes': [('Antigovernment protester', {'ent_type': 'PERSON', 'data': 'Antigovernment protester is a person protesting against the government'}), ('National Flag', {'ent_type': 'THING', 'data': 'National Flag is a flag representing the nation'}), ('Thailand', {'ent_type': 'LOCATION', 'data': 'Thailand is a country in Asia'}), ('Parliament', {'ent_type': 'BUILDING', 'data': 'Parliament is a governmental building'}), ('Bangkok', {'ent_type': 'LOCATION', 'data': 'Bangkok is the capital city of Thailand'})], 'edges': [('Antigovernment protester', 'National Flag', {'action': 'waved'}), ('National Flag', 'Thailand', {'action': 'represents'}), ('Antigovernment protester', 'Parliament', {'action': 'protested outside'}), ('Parliament', 'Bangkok', {'action': 'located in'})]}",
    "Example 5 INPUT: 'ANA's R2D2 Jet Uses The Force to Transport Stars Between The 'Star Wars' Premieres - TheDesignAir', OUTPUT: {'nodes': [('ANA', {'ent_type': 'ORGANIZATION', 'data': 'ANA is Air Nippon Airways, A Japanese Airline'}), ('R2D2', {'ent_type': 'THING', 'data': 'R2D2 is a fictional robot from Star Wars film franchise'}), ('Jet', {'ent_type': 'PRODUCT', 'data': 'Jet is an aircraft'}), ('Stars', {'ent_type': 'PERSON/CONCEPT', 'data': 'Stars is famous people'}), ('Star Wars Premieres', {'ent_type': 'EVENT', 'data': 'Star Wars Premieres is film premieres'})], 'edges': [('ANA', 'Jet', {'action': 'operates'}), ('Jet', 'Stars', {'action': 'transports'}), ('Jet', 'Star Wars Premieres', {'action': 'transports between'}), ('Jet', 'R2D2', {'action': 'themed after'})]}"
]


qa_graph_rules_combined = { 
     "Text Preprocessing Rule": "Break up complex or long sentences into smaller coherent sentences. Restructure the text to explicitly state possession or agency, ensuring that all implied words, particularly those related to ownership or action, are explicitly stated. Use possessive pronouns or nouns, active voice constructions, clarifying phrases or clauses, and rearrange sentences or clauses as necessary to achieve clarity and explicitness. Resolve pronouns to full names for clear understanding. Converts all spelled-out numbers such as 'two' or 'three hundred', that indicate quantity or rank, into their numerical equivalents, such as '2' or '300, respectively. Dont convert when they are part of a named entity like 'Air Force one','Formula One','7-Eleven' etc. ",
     "Entity Detection and Node Creation Rule ":  "Utilize Named Entity Recognition (NER) techniques to identify All named entities in the text. Named entities encompass specific entities that have names, including persons, locations, organizations, dates, etc. Ensure each entity is distinct and unambiguous by resolving entities to their official or most commonly recognized names. Perform entity normalization, splitting composite entities when necessary. Follow the categorization in <<< {'LOCATION': 'Entities representing specific places or geographic locations.', 'PERSON': 'Entities representing individuals, including names of people, titles, positions, etc.', 'ORGANIZATION': 'Entities representing companies, institutions, groups, or any organized entity.', 'DATE': 'Entities representing specific dates, including days of the week, months, years, holidays, etc.', 'TIME': 'Entities representing specific times or time intervals.', 'CARDINAL': 'Entities representing numerical quantities or counts.', 'ORDINAL': 'Entities representing positions in a sequence or ranking.', 'EVENT': 'Entities representing specific events or occurrences like protests, attacks, demonstrations, conflicts, marches, and things like these.  It is of utmost importance that you detect words related to violence, conflict, disruption, protest, damage or propaganda in the text. You must find such keywords or related keywords if they exist in the text no matter how they are present. If such words keywords or related keywords are in the text , you must ensure that they are also present in the entity relationship graph you output, as entity type event, and relate them to other detected entities following causal reasoning, like who did what to whom.', 'PRODUCT': 'Entities representing specific products or items.'} >>> . I Emphasize that entities names are simplified for better representation. For instance, represent 'President of the USA' as two distinct entities, ('President', {'ent_type': 'Person', 'data': 'President of the USA'}) and ('USA', {'ent_type': 'LOCATION', 'data': 'United States of America'}). For instance, even when the 'of' is implied, as in 'Thai National Flag', represent it as 'National Flag of Thailand' and then break it down into separate entities: 'National Flag' as {'ent_type': 'ENTITY', 'data': 'National Flag'}, and 'Thailand' as {'ent_type': 'LOCATION', 'data': 'Thailand, Asia'}. Similarly, for composite entities like 'New York City Police Department', break them down into 'New York City' as {'ent_type': 'LOCATION', 'data': 'New York City, USA'}, and 'Police Department' as {'ent_type': 'ORGANIZATION', 'data': 'Police Department'}. Resolve acronyms to their full forms for clarity. For example, expand 'NASA' to 'National Aeronautics and Space Administration' as {'ent_type': 'ORGANIZATION', 'data': 'National Aeronautics and Space Administration, USA'}.  Encode the entity type as 'ent_type' and provide detailed information within the 'data' field including always the full name, type of thing, brand or manufacturer, relevant details about the entity, and geographic location if applicable. For example, 'Dreamliner' should be {'ent_type': 'THING', 'data': 'Dreamliner is a long-haul airliner from Boeing'}.  To fill the data field, you must follow these entity type specfic guidelines <<< { 'LOCATION': Add Details about location in terms of city, state, country. Example: ('New York City', {'ent_type': 'LOCATION', 'data': 'New York City, New York, USA'}),  'PERSON': Add Full name, if full name is not present, try to guess from context, and official designation. Example: ('Barack Obama', {'ent_type': 'PERSON', 'data': 'Barack Obama is an American politician who served as the 44th president of the United States from 2009 to 2017. A member of the Democratic Party'}),  'ORGANIZATION': Add Full Name of Organization and brief description of what it involved in. Example: ('United Nations', {'ent_type': 'ORGANIZATION', 'data': 'United Nations is an international organization working for peace and security'}),  'DATE': Add Details about which day of the week, months, years, holidays. Example: ('Sept 18 2012', {'ent_type': 'DATE', 'data': 'Tuesday, September 18, 2012'}),  'TIME': Add details about the time is measuring. Example: ('3:30 PM', {'ent_type': 'TIME', 'data': '3:30 PM'}),  'CARDINAL': Add details, using context, to describe what the number counts. Example: ('Three', {'ent_type': 'CARDINAL', 'data': 'Three apples'}),  'ORDINAL': Describe the ranking from context. Example: ('First', {'ent_type': 'ORDINAL', 'data': 'First place'}),  'EVENT': Add details about the specific kind of event in terms of protest, attack, demonstration, conflict, march, and things like these from the text context. Example: ('Protest', {'ent_type': 'EVENT', 'data': 'Protest against climate change'}),  'PRODUCT': Add details about what the product does, and who makes it. Example: ('iPhone', {'ent_type': 'PRODUCT', 'data': 'iPhone is a smartphone made by Apple Inc.'})}  >>> . YOU MUST FOLLOW THESE FORMAT FOR SPECIFYING DETAILS ABOUT THE DETECTED ENTITIES. This approach ensures consistent and clear representation of nodes throughout the graph. You must Ensure all entities are unique and there are no duplicates",
      "News Categorization" :"Your task now is to categorize the given text in to one of the news_categories {'Economy': 'News related to economics, finance, markets, companies, and business trends.','Technology': 'Coverage of advancements, innovations, and trends in the technology industry, including gadgets, software, and digital transformation as well as research findings, breakthroughs, and advancements across various scientific disciplines.','Politics': 'News and analysis on political developments, elections, government policies, and international relations.','Conflict': 'Coverage of conflicts, wars, uprisings, protests, terrorism, security issues, as well as activism, protests, and movements related to topics such as unemployment, inequality, human rights, and social justice.','Disasters': 'Coverage of natural disasters such as floods, earthquakes, hurricanes, wildfires, as well as man-made disasters, accidents, and emergencies.','Health':'Coverage of health issues, medical breakthroughs, research developments, healthcare policies, and public health initiatives.','Environment':'Coverage of environmental issues, climate change, conservation efforts, sustainability initiatives, and ecological challenges.','Culture': 'Articles on culture, entertainment, arts, fashion, travel, leisure, and lifestyle trends.','Sports': 'Coverage of sports events, scores, athlete profiles, sports industry news, and developments in the world of athletics.'} Then extract a keyword or phrase from  the input text that justifies your choice. At this point ask and answer the questions in the format specified",
    "Question Answering":"### Tags Meanings:- `<det  xx det>`: Provides additional details xx about the node to its left.- `<act  xx act>`: Provides additional details xx about the action to its left.- `<e    xx   e>`: Denotes text-extracted named entities from the input text.### Name Meanings: - `named_entity`: Detected named entity of type 'PERSON', 'ORGANIZATION', 'EVENT', 'DATE', 'TIME', 'LOCATION', 'CARDINAL', 'ORDINAL', or 'PRODUCT'. - `named_entity_person_organization_event`: Detected named entity of type 'PERSON', 'ORGANIZATION', or 'EVENT'. - `named_entity_person_organization`: Detected named entity of type 'PERSON' or 'ORGANIZATION'.- `named_entity_event`: Detected named entity of type 'EVENT'. - `named_entity_date_time`: Detected named entity of type 'DATE' or 'TIME'.- `named_entity_location`: Detected named entity of type 'LOCATION'.- `category`: Selected category from news_categories based on the input text.# Instructions: Use the tag encoding and ask the following questions. Answer them in the specified format, then build the graph. ### ## 1. What is the category? - **Question**: What is the category? - **Answer**: News <act 'is about' act> category, because the text says <e xx e>. - **Example**: What is the category? : news <act 'is about' act> 'Conflict' + ',' + 'because the text says' <e 'flash mob protest at Central London' e>. - **Graph Format**: (`'Conflict'`, {'ent_type': 'News Category', 'data': 'flash mob protest at Central London'}) ## 2. What is the action about? - **Question**: What is the action about? - **Answer**: category <act 'is specifically about' act> <e named_entity_event e> <det exx det>. - **Example**: What is the action about? : 'Conflict' <act 'is specifically about' act> <e 'Flashmob Protest' e> <det exx det>. - **Graph Format**: (`'Conflict'`, 'Flashmob Protest', {'action': 'is specifically about'}),  (`'Flashmob Protest'`, {'ent_type': 'EVENT', 'data': 'Flashmob protest is gathering of people protesting'}) ## 3. Who is doing what? - **Question**: Who is doing what? - **Answer**: <e named_entity_person_organization e> <det exx det> <e named_entity_event e> <act axx act>. - **Example**: Who is doing what? : <e 'Unite union members' e> <det 'Unite union members is a labor union' det> <e 'Flashmob Protest' e> <act 'organize' act>. - **Graph Format**: (`'Unite union members'`, {'ent_type': 'ORGANIZATION', 'data': 'Unite union members is a labor union'}),                    (`'Unite union members'`, 'Flashmob Protest', {'action': 'organize'}) ## 4. What is the cause? - **Question**: What is the cause? - **Answer**: <e named_entity_event e> <act xx act> <e named_entity_person_organization e> <det exx det>. - **Example**: What is the cause? : <e 'Flashmob Protest' e> <act 'against' act> <e 'blacklisting and sackings of union officials and members' e>. - **Graph Format**: (`'Blacklisting and Sacking'`, {'ent_type': 'ACTION', 'data': 'Blacklisting is a discriminatory practice'}), (`'Union officials and members'`, {'ent_type': 'PERSON', 'data': 'Union officials is union representatives'}),  ('Flashmob Protest'`, 'Blacklisting and Sacking', {'action': 'against'}) ## 5. Where is this happening? - **Question**: Where is this happening? - **Answer**: <e named_entity_event e> <act 'at place' act> <e named_entity_location e> <det exx det>. - **Example**: Where is this happening? : <e 'Flashmob Protest' e> <act 'at place' act> <e 'Crossrail site in Central London' e>. - **Graph Format**: (`'Crossrail site'`, {'ent_type': 'LOCATION', 'data': 'Crossrail site is a construction site'}),   (`'Central London'`, {'ent_type': 'LOCATION', 'data': 'Central London is a city area in London, UK'}), (`'Flashmob Protest'`, 'Crossrail site', {'action': 'at place'}), (`'Crossrail site'`, 'Central London', {'action': 'located in'}) ## 6. When is this happening? - **Question**: When is this happening? - **Answer**: <e named_entity_event e> <act 'in time' act> <named_entity_date_time> <det xx det>. - **Example**: When is this happening? : <e 'Flashmob Protest' e> <act 'at time' act> UNK. - **Graph Format**: (`'Flashmob Protest'`, {'ent_type': 'EVENT', 'data': 'UNK'}) ## End of Question",
     "Overall guideline" : "You must represent the text in terms of an entity relattionship graph highlighting peoples places actions and dates in the the text focusing on the generated question answer pairs ", 
     "Verfication  Rule" : " Once you are done with the graph, apply the rules again to check if your graph is consistent. In particular check if the edges are consistent with the semantics of the text and the question answers generated,    if not retry from start. All actions described in edges must align with the actions attributed to entities in the text. Ensure that the graph is connected"

}


qa_graph_examples = [
    "Example 1 INPUT: 'Flashmob protest at Crossrail site in Central London by Unite union members in protest against blacklisting and sackings of union officials and members' ,  QA_OUTPUT: ' what  is the category?   : news <act  'is about' act> Conflict <det 'Because it is about flash mob protest at Central London' det>  what  is the action about   : Conflict <act  'is specifically about' act> protest <det'Flashmob protest'det>  who   is doing what        ?: <e 'Unite union members'e>  protest <act 'organize' act>  what  is the cause ?        : protest <act 'against' act> <e 'blacklisting and sackings of union officials and members' e>  ##resolving 'of'  what  is the cause ?        : protest <act 'against' act>  <e'blacklisting and sackings'e>  <det 'Blacklisting is a discriminatory practice' det> <act 'of' act> 'union officials and members'> <det 'Union officials is union representatives' det>  where is this happening ?  : protest  <act 'at place' act> <e'Crossrail site in Central London'e> ## resolving 'in'   where is this happening ?  : protest <act 'at place' act>  <e'Crossrail site'e> <det 'Crossrail site is a construction site' det> <act 'in' act> <e'Central London'e> <det 'Central London is a city area in London, UK' det>  when  is this happening ?   : protest  <act 'in time' act>   UNK ,  GRAPH_OUTPUT:'nodes': [  ('Conflict', {'ent_type': 'News Category', 'data': 'Because it is about flash mob protest'}), ('Flashmob protest',  {'ent_type': 'EVENT', 'data': 'Flashmob protest is gathering of people protesting '}),   ('Crossrail site', {'ent_type': 'LOCATION', 'data': 'Crossrail site is a construction site'}),  ('Central London', {'ent_type': 'LOCATION', 'data': 'Central London is a city area in London, UK'}),  ('Unite union members', {'ent_type': 'ORGANIZATION', 'data': 'Unite union members is a labor union'}),  ('Blacklisting and Sacking', {'ent_type': 'ACTION', 'data': 'Blacklisting is a discriminatory practice'}),   ('Union officials and members', {'ent_type': 'PERSON', 'data': 'Union officials is union representatives'})], 'edges':[('NEWS'               , 'Conflict'      ,   {'action': 'is about'}),      ('Conflict'           , 'protest'       ,   {'action': 'is specifically about'}),          ('Flashmob protest'   , 'Crossrail site',   {'action': 'at place '}),          ('Crossrail site'     , 'Central London',   {'action': 'located in'}),          ('Unite union members', 'Protest'       ,   {'action':  'organize'}),         ('Protest'            , 'Blacklisting and Sacking',         {'action': 'against'}),          ('Blacklisting and Sackings', 'Union officials and members', {'action': 'of'})]",

   "Example 2 INPUT: 'British Muslims campaign outside the BBC headquarters in London against negative media portrayals of Muslims', QA_OUTPUT: ' what  is the category?   : news <act  'is about' act> Conflict <det 'Because it is about British Muslims campaign outside the BBC headquarters in London against negative media portrayals of Muslims' det>  what  is the action about   : Conflict <act  'is specifically about' act> campaign <det'British Muslims campaign outside the BBC headquarters in London against negative media portrayals of Muslims' det>  who   is doing what        ?: <e 'British Muslims'e>  campaign <act 'campaign' act>  what  is the cause ?        : campaign <act 'against' act> <e 'negative media portrayals of Muslims' e>  where is this happening ?  : campaign  <act 'at place' act> <e'BBC headquarters in London'e>  when  is this happening ?   : campaign  <act 'in time' act>   UNK ,  GRAPH_OUTPUT: 'nodes': [  ('Conflict', {'ent_type': 'News Category', 'data': 'Because it is about British Muslims campaign outside the BBC headquarters in London against negative media portrayals of Muslims'}), ('Campaign',  {'ent_type': 'EVENT', 'data': 'Campaign is a form of collective action aiming to bring about social, political, or environmental change'}),   ('British Muslims', {'ent_type': 'ORGANIZATION', 'data': 'British Muslims'}), ('Negative Media Portrayals of Muslims', {'ent_type': 'ACTION', 'data': 'Negative media portrayals are portrayal that unfairly or inaccurately depict Muslims'}),   ('BBC headquarters', {'ent_type': 'LOCATION', 'data': 'BBC headquarters is the main office of the British Broadcasting Corporation'}),  ('London', {'ent_type': 'LOCATION', 'data': 'London is the capital city of England and the United Kingdom'})], 'edges':[('NEWS'               , 'Conflict'      ,   {'action': 'is about'}         ('Conflict'           , 'Campaign'       ,   {'action': 'is specifically about'}),         ('British Muslims'   , 'Campaign'       ,   {'action': 'organize'}),         ('Campaign'          , 'Negative Media Portrayals of Muslims', {'action': 'against'}),         ('Campaign'          , 'BBC headquarters', {'action': 'at place'})]",


    "Example 3 INPUT: 'After 15 minutes England were two up as Darren Bent netted from Youngs pass The Welsh could not muster a riposte', QA_OUTPUT: ' what  is the category?   : news <act  'is about' act> Sports <det 'Because it is about After 15 minutes England were two up as Darren Bent netted from Youngs pass The Welsh could not muster a riposte' det>  what  is the action about   : Sports <act  'is specifically about' act> match <det'England were two up as Darren Bent netted from Youngs pass The Welsh could not muster a riposte'det>  who   is doing what        ?: <e 'England'e>  match <act 'lead' act>  what  is the cause ?        : match <act 'from' act> <e 'Darren Bent netted from Youngs pass' e>  where is this happening ?  : match  <act 'at place' act> <e'15 minutes'e>  when  is this happening ?   : match  <act 'in time' act>   UNK ,  GRAPH_OUTPUT: 'nodes': [  ('Sports', {'ent_type': 'News Category', 'data': 'Because it is about After 15 minutes England were two up as Darren Bent netted from Youngs pass The Welsh could not muster a riposte'}), ('Match',  {'ent_type': 'EVENT', 'data': 'Match is a contest between two individuals or teams'}),   ('England', {'ent_type': 'LOCATION', 'data': 'England is a country that is part of the United Kingdom'}), ('Darren Bent netted from Youngs pass', {'ent_type': 'ACTION', 'data': 'Darren Bent netted from Youngs pass'}),   ('15 minutes', {'ent_type': 'TIME', 'data': '15 minutes'}),  ('The Welsh', {'ent_type': 'ORGANIZATION', 'data': 'The Welsh'})], 'edges':[('NEWS'               , 'Sports'      ,   {'action': 'is about'}),         ('Sports'           , 'Match'       ,   {'action': 'is specifically about'}),         ('England'   , 'Match'       ,   {'action': 'lead'}),         ('Match'          , 'Darren Bent netted from Youngs pass', {'action': 'from'}),         ('Match'          , '15 minutes', {'action': 'at place'})]",
    
    "Example 4 INPUT: 'An antigovernment protester waves a Thai national flag outside Parliament in Bangkok', QA_OUTPUT: ' what  is the category?   : news <act  'is about' act> Conflict <det 'Because it is about an antigovernment protester waves a Thai national flag outside Parliament in Bangkok' det>  what  is the action about   : Conflict <act  'is specifically about' act> protest <det'an antigovernment protester waves a Thai national flag outside Parliament in Bangkok'det>  who   is doing what        ?: <e 'antigovernment protester'e>  protest <act 'wave' act>  what  is the cause ?        : protest <act 'with' act> <e 'Thai national flag' e>  where is this happening ?  : protest  <act 'at place' act> <e'Parliament in Bangkok'e>  when  is this happening ?   : protest  <act 'in time' act>   UNK ,  GRAPH_OUTPUT: 'nodes': [  ('Conflict', {'ent_type': 'News Category', 'data': 'Because it is about an antigovernment protester waves a Thai national flag outside Parliament in Bangkok'}), ('Protest',  {'ent_type': 'EVENT', 'data': 'Protest is a demonstration or declaration of disapproval or objection by action or gesture'}),   ('Antigovernment protester', {'ent_type': 'PERSON', 'data': 'Antigovernment protester'}), ('Thai national flag', {'ent_type': 'ENTITY', 'data': 'Thai national flag'}),   ('Parliament in Bangkok', {'ent_type': 'LOCATION', 'data': 'Parliament in Bangkok is a legislative body in the capital city of Thailand'})], 'edges':[('NEWS'               , 'Conflict'      ,   {'action': 'is about'}  ),       ('Conflict'           , 'Protest'       ,   {'action': 'is specifically about'}),         ('Antigovernment protester'   , 'Protest'       ,   {'action': 'organize'}),         ('Protest'          , 'Thai national flag', {'action': 'with'}),         ('Protest'          , 'Parliament in Bangkok', {'action': 'at place'})]",
    "Example 5 INPUT: 'ANA's R2D2 Jet Uses The Force to Transport Stars Between The 'Star Wars' Premieres - TheDesignAir', QA_OUTPUT: ' what  is the category?   : news <act  'is about' act> Culture <det 'Because it is about ANA's R2D2 Jet Uses The Force to Transport Stars Between The 'Star Wars' Premieres - TheDesignAir' det>  what  is the action about   : Culture <act  'is specifically about' act> transportation <det'ANA's R2D2 Jet Uses The Force to Transport Stars Between The 'Star Wars' Premieres - TheDesignAir'det>  who   is doing what        ?: <e 'ANA's R2D2 Jet'e>  transportation <act 'use' act>  what  is the cause ?        : transportation <act 'with' act> <e 'The Force' e>  where is this happening ?  : transportation  <act 'at place' act> <e'Star Wars' Premieres'e>  when  is this happening ?   : transportation  <act 'in time' act>   UNK ,  GRAPH_OUTPUT: 'nodes': [  ('Culture', {'ent_type': 'News Category', 'data': 'Because it is about ANA's R2D2 Jet Uses The Force to Transport Stars Between The 'Star Wars' Premieres - TheDesignAir'}), ('Transportation',  {'ent_type': 'EVENT', 'data': 'Transportation is the action of moving people or goods from one place to another'}),   ('ANA's R2D2 Jet', {'ent_type': 'THING', 'data': 'ANA's R2D2 Jet is an aircraft'}), ('The Force', {'ent_type': 'ENTITY', 'data': 'The Force'}),   ('Star Wars Premieres', {'ent_type': 'EVENT', 'data': 'Star Wars Premieres'}), ('TheDesignAir', {'ent_type': 'ORGANIZATION', 'data': 'TheDesignAir'})], 'edges':[('NEWS'               , 'Culture'      ,   {'action': 'is about'}         ('Culture'           , 'Transportation'       ,   {'action': 'is specifically about'}),         ('ANA's R2D2 Jet'   , 'Transportation'       ,   {'action': 'use'}),         ('Transportation'          , 'The Force', {'action': 'with'}),         ('Transportation'          , 'Star Wars Premieres', {'action': 'at place'})]"
    ]

graph_evd_examples =graph_examples
###############################################3
#upvotes = load_upvotes_from_file()   
#good_examples_file='news_cat/single_set_goodexamples.npz'
#upvotes_dict_filename = 'news_cat/upvotes.json'  # File to save upvotes data
#sampling_size     =5
#good_examples     =np.load(good_examples_file,allow_pickle=True)
#good_examples     =good_examples[good_examples.files[0]]
#good_examples     =good_examples.flat[0]



def generate_prompt_examples(good_examples, num_samples):
   selected_keys = random.sample(list(good_examples.keys()), num_samples)
   example_output_list = []
   examples_string = []
   for idx, key in enumerate(selected_keys, 1):
      example_input = key
      example_output = list(good_examples[key])[0]
      one_example = f"Example {idx}: Input: '{example_input}', Output: {example_output}" 
      one_example = one_example.replace('\n',' , ')
      examples_string.append(one_example)
   
   return examples_string

def load_upvotes_from_file():
    try:
        with open(upvotes_dict_filename, 'r') as f:
            return json.load(f)
    except FileNotFoundError:
        empty_upvotes = {}
        save_upvotes_to_file(empty_upvotes)  # Save an empty dictionary
        return empty_upvotes


def save_upvotes_to_file(upvotes_dict):
    with open(upvotes_dict_filename, 'w') as f:
        json.dump(upvotes_dict, f)




def upvote_sample(selected_keys, delta):
    for sample_key in selected_keys:
         upvotes[sample_key] = upvotes.get(sample_key, 0) + delta

    # Save the updated upvotes data after upvoting
    save_upvotes_to_file(upvotes)      





def generate_better_examples(num_samples,use_probability=False):    
    #pdb.set_trace()
    if use_probability:
        probabilities = [max(upvotes.get(key, 0), 0.01) for key in good_examples.keys()]
        total_upvotes = sum(probabilities)
        probabilities = [vote / total_upvotes for vote in probabilities]
        selected_keys = random.choices(list(good_examples.keys()), weights=probabilities, k=num_samples)
    else:
        selected_keys = random.sample(list(good_examples.keys()), num_samples)
    example_output_list = []
    examples_string = []
    for idx, key in enumerate(selected_keys, 1):
        example_input = key
        example_output = list(good_examples[key])[0]
        one_example = f"Example {idx}: Input: '{example_input}', Output: {example_output}" 
        one_example = one_example.replace('\n',' , ')
        examples_string.append(one_example)
    return examples_string, selected_keys




        
#graph_examples, selected_keys    =generate_better_examples(good_examples, sampling_size, True)
############################################################'''
                    
       







